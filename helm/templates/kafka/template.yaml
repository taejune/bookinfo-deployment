{{- if eq .Values.eventing.type "internal" -}}
apiVersion: tmax.io/v1
kind: Template
metadata:
  name: {{ template "bookinfo.kafka.template" . }}
  labels:
{{ include "bookinfo.labels" . | indent 4 }}
shortDescription: "Kafka Single Deployment"
longDescription: "1 Kafka 1 Zookeeper No SSL Only In-cluster Deployment"
urlDescription: https://kafka.apache.org/
imageUrl: "https://i.pinimg.com/originals/6a/46/51/6a46514d46e0edd07ab4e80c828d60a8.png"
provider: tmax
categories:
- kafka
- zookeeper
- message
parameters:
- name: APP_NAME
  displayName: AppName
  description: A Kafka Name
  required: true
- name: KAFKA_STORAGE
  displayName: Kafka Storage
  description: Kafka Storage size
  value: 5Gi
  required: true
- name: STORAGE_CLASS
  displayName: StorageClass
  description: Storage class name
  value: csi-cephfs-sc
  required: true
- name: KAFKA_RES_REQ_CPU
  displayName: KafkaResourceRequestCPU
  description: Kafka Resource request, CPU (e.g., 1)
  value: 1
  required: true
- name: KAFKA_RES_REQ_MEM
  displayName: KafkaResourceRequestMem
  description: Kafka Resource request, Mem (e.g., 1Gi)
  value: 1Gi
  required: true
- name: KAFKA_RES_LIMIT_CPU
  displayName: KafkaResourceLimitCPU
  description: Kafka Resource limit, CPU (e.g., 1)
  value: 1
  required: true
- name: KAFKA_RES_LIMIT_MEM
  displayName: KafkaResourceLimitMem
  description: Kafka Resource limit, Mem (e.g., 1Gi)
  value: 1Gi
  required: true
- name: ZOOKEEPER_RES_REQ_CPU
  displayName: KafkaResourceRequestCPU
  description: Kafka Resource request, CPU (e.g., 1)
  value: 1
  required: true
- name: ZOOKEEPER_RES_REQ_MEM
  displayName: KafkaResourceRequestMem
  description: Kafka Resource request, Mem (e.g., 1Gi)
  value: 1Gi
  required: true
- name: ZOOKEEPER_RES_LIMIT_CPU
  displayName: KafkaResourceLimitCPU
  description: Kafka Resource limit, CPU (e.g., 1)
  value: 1
  required: true
- name: ZOOKEEPER_RES_LIMIT_MEM
  displayName: KafkaResourceLimitMem
  description: Kafka Resource limit, Mem (e.g., 1Gi)
  value: 1Gi
  required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-zookeeper
    labels:
      app: ${APP_NAME}-zookeeper
  spec:
    selector:
      app: ${APP_NAME}-zookeeper
    ports:
    - port: 2181
      targetPort: 2181
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-kafka-pvc
    labels:
      app: ${APP_NAME}-kafka-pvc
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${KAFKA_STORAGE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-zookeeper
    labels:
      app: ${APP_NAME}-zookeeper
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP_NAME}-zookeeper
    template:
      metadata:
        labels:
          app: ${APP_NAME}-zookeeper
      spec:
        containers:
        - name: zookeeper
          image: {{ .Values.eventing.internal.zookeeper.image.repository }}:{{ .Values.eventing.internal.zookeeper.image.tag }}
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          ports:
            - containerPort: 2181
          resource:
            requests:
              cpu: ${ZOOKEEPER_RES_REQ_CPU}
              memory: ${ZOOKEEPER_RES_REQ_MEM}
            limits:
              cpu: ${ZOOKEEPER_RES_LIMIT_CPU}
              memory: ${ZOOKEEPER_RES_LIMIT_MEM}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-kafka
    labels:
      app: ${APP_NAME}-kafka
  spec:
    selector:
      app: ${APP_NAME}-kafka
    ports:
    - port: 9092
      targetPort: 9092
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-kafka
    labels:
      app: ${APP_NAME}-kafka
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP_NAME}-kafka
    template:
      metadata:
        labels:
          app: ${APP_NAME}-kafka
      spec:
        containers:
        - name: kafka
          image: {{ .Values.eventing.internal.kafka.image.repository }}:{{ .Values.eventing.internal.kafka.image.tag }}
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INSIDE://${APP_NAME}-kafka:9092"
            - name: KAFKA_LISTENERS
              value: "INSIDE://0.0.0.0:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INSIDE:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INSIDE"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "${APP_NAME}-zookeeper:2181"
            - name: KAFKA_LOG_DIRS
              value: /kafka/logs
          ports:
            - containerPort: 9092
          resources:
            requests:
              cpu: ${KAFKA_RES_REQ_CPU}
              memory: ${KAFKA_RES_REQ_MEM}
            limits:
              cpu: ${KAFKA_RES_LIMIT_CPU}
              memory: ${KAFKA_RES_LIMIT_MEM}
          volumeMounts:
            - name: kafka-data
              mountPath: /kafka
        volumes:
          - name: kafka-data
            persistentVolumeClaim:
              claimName: ${APP_NAME}-kafka-pvc
{{- end -}}